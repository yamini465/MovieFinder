{"version":3,"sources":["components/Nav.js","components/Search.js","components/Movie.js","components/MovieList.js","components/Pagination.js","components/MovieInfo.js","components/App.js","serviceWorker.js","index.js"],"names":["Nav","className","href","Search","props","action","onSubmit","handleSubmit","placeholder","type","onChange","handleChange","Movie","image","src","alt","style","width","height","onClick","viewMovieInfo","movieId","MovieList","movies","map","movie","i","key","id","poster_path","Pagination","pageLinks","active","currentPage","push","nextPage","pages","MovieInfo","closeMovieInfo","cursor","padding","marginLeft","currentMovie","title","release_date","substring","split","concat","join","overview","App","e","preventDefault","fetch","apiKey","state","searchTerm","then","data","json","console","log","setState","results","totalResults","total_results","target","value","pageNumber","filteredMovie","filter","newCurrentMovie","length","numberPages","Math","floor","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2800b9aa.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Nav = () => {\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-wrapper container\">\r\n                <a href=\"#\" className=\"brand-logo\">Movie Finder</a>\r\n            </div> \r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from 'react'\r\n\r\nconst Search = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <section className=\"col s4 offset-s4\">\r\n                    <form action=\"\" onSubmit={props.handleSubmit}>\r\n                        <div className=\"input-field\">\r\n                            <input placeholder=\"Search Movie\" type=\"text\" onChange={props.handleChange}/>\r\n                        </div>\r\n                    </form>\r\n                </section>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;","import React from 'react'\r\n\r\nconst Movie = (props) => {\r\n    return (\r\n        <div className=\"col s12 m6 l3\">\r\n            <div className=\"card\">\r\n                <div className=\"card-image waves-effect waves-block waves-light\">\r\n                    {\r\n                       props.image==null?<img src={`https://s3-ap-southeast-1.amazonaws.com/upcode/static/default-image.jpg`} alt=\"card image\" style={{width:\"100%\",height:360}} />: <img src={`https://image.tmdb.org/t/p/w185${props.image}`} alt=\"card image\" style={{width:\"100%\",height:360}} /> \r\n                    }\r\n                </div>\r\n                <div className=\"card-content\">\r\n                    <p><a href=\"#\" onClick={()=>props.viewMovieInfo(props.movieId)}>View Details</a></p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Movie;","import React from 'react'\r\nimport Movie from './Movie';\r\nconst MovieList = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"nav\">\r\n                <div className=\"row\">\r\n                <div className=\"col s12\">\r\n                    {\r\n                        props.movies.map((movie , i) => {\r\n                            return (\r\n                               <Movie key={i} viewMovieInfo={props.viewMovieInfo} movieId={movie.id} image={movie.poster_path}/>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieList;","import React from 'react'\r\n\r\nconst Pagination = (props) => {\r\n   const pageLinks = []\r\n   for(let i=1;i<=props.pages+1;i++)\r\n   {\r\n       let active = props.currentPage == i ? 'active' : '';\r\n   pageLinks.push(<li className={`waves-effect ${active}`} key={i} onClick={()=>props.nextPage(i)}><a href=\"#\">{i}</a></li>)\r\n   }\r\nreturn(\r\n    <div className=\"container\">\r\n        <div className=\"row\">\r\n            <ul className=\"pagination\">\r\n                {props.currentPage > 1 ? <li className={`waves-effect`} onClick={()=>props.nextPage(props.currentPage - 1)}><a href=\"#\">Prev</a></li> : ''}\r\n                {pageLinks}\r\n                {props.currentPage < props.pages + 1 ? <li className={`waves-effect`}  onClick={()=>props.nextPage(props.currentPage + 1)}><a href=\"#\">Next</a></li> : ''}\r\n            </ul>\r\n        </div>\r\n    </div>\r\n)\r\n}\r\n\r\nexport default Pagination;","import React from 'react'\r\n\r\nconst MovieInfo = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\" onClick={props.closeMovieInfo} style={{cursor:\"pointer\",padding:20}}>\r\n                <i className=\"fa fa-arrow-left\"></i>\r\n                <span style={{marginLeft:10}}>Go Back</span>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m4\">\r\n                {props.currentMovie.poster_path == null ? <img src={`https://s3-ap-southeast-1.amazonaws.com/upcode/static/default-image.jpg`} alt=\"Card image\" style={{width:\"100%\",height:300}}/>: <img src={`https://image.tmdb.org/t/p/w185${props.currentMovie.poster_path}`} alt=\"Card image\" style={{width:\"100%\",height:300}}/>}\r\n                </div>\r\n                <div className=\"col s12 m8\">\r\n                <div className=\"info-container\">\r\n                    <p>{props.currentMovie.title}</p>\r\n                    <p>{props.currentMovie.release_date.substring(5).split(\"-\").concat(props.currentMovie.release_date.substring(0, 4)).join(\"/\")}</p>\r\n                    <p>{props.currentMovie.overview}</p>\r\n                </div>\r\n            </div>\r\n            </div>    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MovieInfo;","import React, { Component } from 'react';\nimport Nav from './Nav';\nimport Search from './Search'\nimport MovieList from './MovieList';\nimport Pagination from './Pagination';\nimport MovieInfo from './MovieInfo';\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n       movies:[],\n       searchTerm:'',\n       totalResults:0,\n       currentPage:1,\n       currentMovie:null\n    }\n    this.apiKey = 'ccf866db9c821ae90a6b644365a73222';\n  }\n\n  handleSubmit =(e) =>\n  {\n    e.preventDefault();\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=${this.apiKey}&query=${this.state.searchTerm}`)\n    .then(data => data.json())\n    .then(data => {\n      console.log(data)\n      this.setState({ movies : [...data.results],totalResults:data.total_results})\n    })\n  }\n  handleChange = (e) =>\n  {\n      this.setState({searchTerm:e.target.value})\n  }\n  nextPage = (pageNumber) =>\n  {\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=${this.apiKey}&query=${this.state.searchTerm}&page=${pageNumber}`)\n    .then(data => data.json())\n    .then(data => {\n      console.log(data)\n      this.setState({ movies : [...data.results],currentPage:pageNumber})\n    })\n  }\n\n  viewMovieInfo = (id) =>\n  {\n    const filteredMovie = this.state.movies.filter(movie => movie.id == id)\n     const newCurrentMovie = filteredMovie.length> 0 ? filteredMovie[0]:null\n     this.setState({currentMovie:newCurrentMovie})\n  }\n  closeMovieInfo = () =>\n  {\n    this.setState({currentMovie:null})\n  }\n  render(){\n    const numberPages = Math.floor(this.state.totalResults/20);\n  return (\n    <div className=\"App\">\n      <Nav/>\n      {this.state.currentMovie == null ? \n      <div><Search handleSubmit={this.handleSubmit} handleChange={this.handleChange}/><MovieList viewMovieInfo={this.viewMovieInfo} movies={this.state.movies}/></div>\n      :<MovieInfo currentMovie={this.state.currentMovie} closeMovieInfo={this.closeMovieInfo}/>}\n     {this.state.totalResults  > 20  && this.state.currentMovie == null ? <Pagination pages={numberPages} nextPage={this.nextPage} currentPage={this.state.currentPage}/> : ''} \n    </div>\n  );\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}